@import "../Vars.scss";

$planet-size: 6px;
$rotation-period: 10s;
$buffer: 5%;
$diameter: 100 + ($buffer * 2);

@function randomNum($min, $max) {
  $rand: random();
  $randomNum: $min + floor($rand * (($max - $min) + 1));

  @return $randomNum;
}

div.wrapper,
div.orbit {
  transform-style: preserve-3d;
}

div.orbit {
  @for $x from 1 through 5 {
    @each $i, $size, $delay, $height,
      $orbit-diameter in (1, randomNum(5, 12), random(), 56, 0.9),
      (2, randomNum(5, 12), random(), 77, 0.84),
      (3, randomNum(5, 12), random(), 48, 1),
      (4, randomNum(5, 12), random(), 43, 0.99),
      (5, randomNum(5, 12), random(), 27, 0.89),
      (6, randomNum(5, 12), random(), 24, 0.86),
      (7, randomNum(5, 12), random(), 14, 0.69),
      (8, randomNum(5, 12), random(), 4, 0.39),
      (9, randomNum(5, 12), random(), 20, 0.8),
      (10, randomNum(5, 12), random(), 40, 0.98),
      (11, randomNum(5, 12), random(), 83, 0.75),
      (12, randomNum(5, 12), random(), 87, 0.67)
    {
      &.orbit-#{$x}-#{$i} {
        $width: $diameter * $orbit-diameter;

        animation: orbit-rotate $rotation-period linear infinite;

        animation-delay: ($rotation-period * -$delay);

        width: $width;
        position: absolute;
        inset: ($height * 1%) 0 0 ((100- $width)/2);

        &:after {
          animation-delay: ($rotation-period * -$delay);
          height: $size * 1px;
          width: $size * 1px;
        }
      }
    }
  }
}

div.orbit:after {
  display: block;
  content: "";
  animation: planet-rotate $rotation-period linear infinite;
  background-color: $main-green;
  border-radius: 50%;
}

@keyframes orbit-rotate {
  from {
    transform: rotateY(0deg);
  }
  to {
    transform: rotateY(360deg);
  }
}

@keyframes planet-rotate {
  from {
    transform: rotateY(0deg);
  }
  to {
    transform: rotateY(-360deg);
  }
}
